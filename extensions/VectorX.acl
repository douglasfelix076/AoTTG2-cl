extension VectorX
{
    function ClampMagnitude(vector, min, max) 
    {
        magnitude = vector.Magnitude;
        if (magnitude < min)
        {
            return vector.Normalized * min;
        }
        if (magnitude > max)
        {
            return vector.Normalized * max;
        }

        return vector;
    }

    function DirectionToEuler(direction)
    {
        yaw = Math.Atan2(direction.Z, direction.X) * Math.Rad2DegConstant;
        pitch = Math.Atan2(direction.Y, Math.Sqrt(direction.X * direction.X + direction.Z * direction.Z)) * Math.Rad2DegConstant;
        return Vector3(pitch, yaw, 0);
    }
    
    function Rotate(v, q)
    {
        qVec = Vector3(q.X, q.Y, q.Z);
        cross1 = Vector3.Cross(qVec, v);
        cross2 = Vector3.Cross(qVec, cross1);

        rotatedVector = v + 2 * q.W * cross1 + 2 * cross2;
        return rotatedVector;
    }

    function RotateAroundPoint(P1, P2, q)
    {
        v = P1 - P2;
        v = self.Rotate(v, q);
        v = P2 + v;
        return v;
    }
}