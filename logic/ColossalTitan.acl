class Main
{
    RestartWhenAllDead = true;

    function Init()
    {
        Map.UpdateNavMeshAsync();

        region = Map.FindMapObjectByName("TitanWarning");
        if (region != null)
        {
            region.GetComponent("CollisionTrigger").SetHandler(self);
        }
        region2 = Map.FindMapObjectByName("TitanOutline");
        if (region2 != null)
        {
            region2.GetComponent("CollisionTrigger").SetHandler(self);
        }
        region3 = Map.FindMapObjectByName("TitanWarning2");
        if (region3 != null)
        {
            region3.GetComponent("CollisionTrigger").SetHandler(self);
        }
    }

    function OnCharacterDie(victim, killer, killerName)
    {
        if (victim.Type == "Human" && !Game.IsEnding)
        {
            if (Game.Humans.Count == 0 && self.RestartWhenAllDead)
            {
                Game.End(10.0);
                UI.SetLabel("MiddleCenter", "Humanity fail!");
            }
        }
    }

    function HandleCollision(region, type, other)
    {
        if (type == "enter" && other.Type == "Titan")
        {
            if (region.MapObject.Name == "TitanOutline")
            {
                other.AddOutline(Color(255,255,255), "OutlineAll");
            }
            elif (region.MapObject.Name == "TitanWarning")
            {
                message = "<color=#A8FF24><b>WARNING!</b> An abnormal titan is approaching the north gate!</color>";
                Game.Print(message);
            }
        }
    }
}

component ColossalTitan
{
    RevealPosition = Vector3(0, 0, 0);
    KickDoor = true;
    CiviliansID = 0;
    DoorBrokenID = 0;
    DoorClosedID = 0;
    
    _name = "Colossal Titan";
    _difficulty = 2;
    _state = "idle";
    _maxHealth = 1000;
    _currentHealth = 1000;
    _hasDied = false;
    _healthTime = 0.2;
    _waitTime = 3.0;
    _myDistance = 0.0;
    _actionName = "";
    _attackAnimation = "";
    _attackCheckTime = 0.0;
    _attackChkOnce = false;
    _HitCapsuleEnabled = false;
    _attackCount = 0;
    _startPattern = 0;
    _animationLength = 0.0;
    _animationStart = 0.0;
    _isSteamNeed = false;
    _kickedDoor = false;

    # references
    _transform = null;
    _animation = null;
    _checkHitCapsuleStart = null;
    _checkHitCapsuleEnd = null;
    _hitCapsule = null;
    _neckSteamObject = null;
    _sweepSmokeObject = null;
    _neck = null;
    _foreArmR = null;
    _handL = null;
    _handR = null;
    _napeCollider = null;
    _door_broken = null;
    _door_closed = null;
    _dummyTitan = null;
    _civilians = null;
    _myHero = null;

    function Init()
    {
        self._transform = self.MapObject.Transform;
        self._animation = self.MapObject.GetComponent("Animator");
        self._difficulty = Game.GetGeneralSetting("Difficulty");
        self._neck = self._transform.GetTransform("Amarture/Core/Controller_Body/hip/spine/chest/neck");
        self._neckSteamObject = self._neck.GetTransform("colossal_smoke_hit");
        self._foreArmR = self._transform.GetTransform("Amarture/Core/Controller_Body/hip/spine/chest/shoulder_R/upper_arm_R/forearm_R");
        self._handR = self._foreArmR.GetTransform("hand_R/hand_R_001");
        self._handL = self._transform.GetTransform("Amarture/Core/Controller_Body/hip/spine/chest/shoulder_L/upper_arm_L/forearm_L/hand_L/hand_L_001");
        self._sweepSmokeObject = self._foreArmR.GetTransform("sweep_smoke");
        self._napeCollider = Map.CreateMapObjectRaw("Scene,Geometry/Sphere1,645,0,1,0,0,0,NapeCollider,0,0,0,0,0,0,5,5,5,Region,Hitboxes,Default,DefaultNoTint|255/255/255/255,CollisionTrigger|OnCollision:false|OnHooked:false").GetComponent("CollisionTrigger");
        self._hitCapsule = Map.CreateMapObjectRaw("Scene,Geometry/Capsule1,596,0,1,0,0,0,SweepCollider,0,0,0,0,0,0,40,1,40,Region,Characters,Default,Default|255/255/255/255,CollisionTrigger|OnHit:false|OnHooked:false").GetComponent("CollisionTrigger");
        self._napeCollider.SetHandler(self);
        self._hitCapsule.SetHandler(self);
        self._civilians = Map.FindMapObjectByID(self.CiviliansID);

        if (self.KickDoor)
        {
            self._door_broken = Map.FindMapObjectByID(self.DoorBrokenID);
            self._door_closed = Map.FindMapObjectByID(self.DoorClosedID);
            self._door_broken.Active = false;
            self._door_closed.Active = true;
        }
        
        self._animation.Fade = 0.0; 
        self._state = "wait";
        self.GetNearestHuman();

        hasRespawn = Game.GetMiscSetting("EndlessRespawnEnabled");
        if (hasRespawn)
        {
            if (self._difficulty == 1) { self._currentHealth = 5000; }
            elif (self._difficulty == 2) { self._currentHealth = 8000; }
            elif (self._difficulty == 3) { self._currentHealth = 12000; }
            elif (self._difficulty == 4) { self._currentHealth = 16000; }
        }
        else
        {
            if (self._difficulty == 1) { self._currentHealth = 2000; }
            elif (self._difficulty == 2) { self._currentHealth = 3500; }
            elif (self._difficulty == 3) { self._currentHealth = 5000; }
            elif (self._difficulty == 4) { self._currentHealth = 8000; }
        }
        self._maxHealth = self._currentHealth;
        
        if (Network.IsMasterClient)
        {
            self._maxHealth = self._currentHealth;
            if (Game.GetTitanSetting("TitanHealthMode") > 0)
            {
                health = Random.RandomInt(Game.GetTitanSetting("TitanHealthMin"), Game.GetTitanSetting("TitanHealthMax") + );
                self._maxHealth = health;
                self._currentHealth = health;
            }
            self.CreateDummy();
        }
    }

    function OnTick()
    {
        self._healthTime -= Time.TickTime;
        if (Network.IsMasterClient)
        {
            self._dummyTitan.Position = self._transform.Position + Vector3.Down * 1000;
            self._dummyTitan.Velocity = Vector3.Zero;

            if (self._state == "wait")
            {
                self._waitTime -= Time.TickTime;
                if (self._waitTime <= 0.0)
                {
                    self._state = "idle";
                    self.Blind();
                    self.UpdateHealth();
                    self._transform.Position = self.RevealPosition;
                    Game.SpawnEffect("ShifterThunder", self._transform.Position + Vector3.Up * 350.0, Vector3(0.0, 0.0, 0.0), 8.0);
                    self.NetworkView.SendMessageOthers("Reveal|" + self._currentHealth + "/" + self._maxHealth);
                }
            }
            elif (self._state == "idle")
            {
                if (self._startPattern <= 3)
                {
                    if (self._startPattern == 0)
                    {
                        self.Slap("r1");
                    }
                    elif (self._startPattern == 1)
                    {
                        self.AttackSweep("");
                    }
                    elif (self._startPattern == 2)
                    {
                        self.Steam();
                    }
                    else
                    {
                        if (self.KickDoor)
                        {
                            self.Kick();
                        }
                        else
                        {
                            self.Idle();
                        }
                    }
                    self._startPattern += 1;
                }
                elif (self._isSteamNeed || self._hasDied)
                {
                    self.Steam();
                    self._isSteamNeed = false;
                }
                elif (self._myHero == null)
                {
                    self.GetNearestHuman();
                }
                else
                {
                    vector = self._myHero.Position - self._transform.Position;
                    current = MathX.Atan2(vector.Z, vector.X) * Math.Rad2DegConstant;
                    f = Math.DeltaAngle(current, self._transform.Rotation.Y - 90.0);
                    self._myDistance = vector.Magnitude;
                    heightDiff = self._myHero.Position.Y - self._transform.Position.Y;
                    if (self._myDistance < 85.0 && Random.RandomInt(0, 100) < 5)
                    {
                        self.Steam();
                    }
                    else
                    {
                        if (heightDiff > 310.0 && heightDiff < 350.0)
                        {
                            if (Vector3.Distance(self._myHero.Position, self._transform.GetTransform("APL1").Position) < 40.0)
                            {
                                self.Slap("l1");
                                return;
                            }
                            if (Vector3.Distance(self._myHero.Position, self._transform.GetTransform("APL2").Position) < 40.0)
                            {
                                self.Slap("l2");
                                return;
                            }
                            if (Vector3.Distance(self._myHero.Position, self._transform.GetTransform("APR1").Position) < 40.0)
                            {
                                self.Slap("r1");
                                return;
                            }
                            if (Vector3.Distance(self._myHero.Position, self._transform.GetTransform("APR2").Position) < 40.0)
                            {
                                self.Slap("r2");
                                return;
                            }
                            if (self._myDistance < 150.0 && Math.Abs(f) < 80.0)
                            {
                                self.AttackSweep("");
                                return;
                            }
                        }
                        if (heightDiff < 300.0 && Math.Abs(f) < 80.0 && self._myDistance < 85.0)
                        {
                            self.AttackSweep("_vertical");
                        }
                        else
                        {
                            attack = Random.RandomInt(0, 7);
                            if (attack == 0)
                            {
                                self.Slap("l1");
                            }
                            elif (attack == 1)
                            {
                                self.Slap("l2");
                            }
                            elif (attack == 2)
                            {
                                self.Slap("r1");
                            }
                            elif (attack == 3)
                            {
                                self.Slap("r2");
                            }
                            elif (attack == 4)
                            {
                                self.AttackSweep("");
                            }
                            elif (attack == 5)
                            {
                                self.AttackSweep("_vertical");
                            }
                            elif (attack == 6)
                            {
                                self.Steam();
                            }
                        }
                    }
                }
            }
            else
            {
                normalized = self.GetAnimationNormalizedTime();
                if (self._state == "attack_sweep")
                {
                    start = 0.4;
                    end = 0.57;
                    if (normalized >= start && normalized <= end)
                    {
                        self._HitCapsuleEnabled = true;
                        self.MoveHitCapsule(self._checkHitCapsuleStart.Position, self._checkHitCapsuleEnd.Position);
                    }
                    else
                    {
                        self._HitCapsuleEnabled = false;
                        if (normalized >= 1.0)
                        {
                            self._sweepSmokeObject.ToggleParticle(false);
                            self.NetworkView.SendMessageOthers("ToggleSweepSmoke|False");
                            self.GetNearestHuman();
                            self.Idle();
                        }
                    }
                }
                elif (self._state == "kick")
                {
                    if (!self._attackChkOnce && normalized >= self._attackCheckTime)
                    {
                        self._attackChkOnce = true;
                        if (self.KickDoor)
                        {
                            self._kickedDoor = true;
                            self._door_broken.Active = true;
                            self._door_closed.Active = false;
                            self.NetworkView.SendMessageOthers("ChangeDoor|False");
                        }

                        pos = self._transform.Position + self._transform.Forward * 120.0 + self._transform.Right * 30.0;
                        self.Instantiate("Scene,Custom/colossaltitan/rock,553,0,1,0,1,0,rock,0,10,676,0,0,0,1,1,1,Physical,All,Default,DefaultNoTint|255/255/255/255,RockScript|Disabled:false,KillRegion|Team:None|KillHumans:true|KillTitans:true|KillShifters:true|KillMessage:Rock");
                        self.Instantiate("Scene,Custom/colossaltitan/boom1_ct_kick,792,0,1,1,1,0,boom1_ct_kick," + pos.X + "," + pos.Y + "," + pos.Z + ",270,0,0,1,1,1,None,Characters,Default,DefaultNoTint|255/255/255/255,");
                        self.CreateExplosionAt(pos, self._name, 62.99, 156.49);
                    }
                    if (normalized >= 1.0)
                    {
                        self.GetNearestHuman();
                        self.Idle();
                    }
                }
                elif (self._state == "slap")
                {
                    if (!self._attackChkOnce && normalized >= self._attackCheckTime)
                    {
                        self._attackChkOnce = true;
                        Game.SpawnEffect("Boom1", self._checkHitCapsuleStart.Position, Vector3(270.0, 0.0, 0.0), 5.0);
                        self.CreateExplosionAt(self._checkHitCapsuleStart.Position, self._name, 30.0, 60.0);
                    }
                    if (normalized >= 1.0)
                    {
                        self.GetNearestHuman();
                        self.Idle();
                    }
                }
                elif (self._state == "steam")
                {
                    if (!self._attackChkOnce && normalized >= self._attackCheckTime)
                    {
                        self._attackChkOnce = true;
                        self.ColossalSteam(false);
                    }
                    if (normalized >= 1.0)
                    {
                        self.ColossalSteam(true);
                        if (self._hasDied)
                        {
                            Game.End(10.0);
                            UI.SetLabelAll("MiddleCenter", "Humanity win!");
                            if (Network.IsMasterClient)
                            {
                                self._transform.Position = self._transform.Position +  Vector3.Down * 50000.0;
                            }
                        }
                        self.GetNearestHuman();
                        self.Idle();
                    }
                }
            }
        }
    }
    
    function OnLateFrame()
    {
        self._napeCollider.MapObject.Position = self._neck.TransformPoint(Vector3(-1.7, 0.0, -2.95));
    }

    function OnNetworkMessage(sender, message) 
    {
        #Game.Print("<color=white>RPC:</color> <color=green>" + message + "</color>");
        
        split = String.Split(message, "|");
        if (split.Count == 0)
        {
            return;
        }
        call = split.Get(0);
        args = List();
        if (split.Count > 1)
        {
            args = String.Split(split.Get(1), "/");
        }
        
        if (call == "PlayAnimation")
        {
            aniName = args.Get(0);
            time = Convert.ToFloat(args.Get(1));
            self.JustPlayAnimation(aniName, time);
        }
        elif (call == "Instantiate")
        {
            split.RemoveAt(0); # raw data
            Map.CreateMapObjectRaw(String.Join(split, "|"));
        }
        elif (call == "Damage")
        {
            damage = Convert.ToInt(args.Get(0));
            type = args.Get(1);
            self.GetDamaged(sender, damage, type);
        }
        elif (call == "StartNeckSteam")
        {
            self.StartNeckSteam();
        }
        elif (call == "ToggleSweepSmoke")
        {
            enabled = Convert.ToBool(args.Get(0));
            self.ToggleSweepSmoke(enabled);
        }
        elif (call == "ChangeDoor")
        {
            onJoin = Convert.ToBool(args.Get(0));
            self.ChangeDoor(onJoin);
        }
        elif (call == "Reveal")
        {
            health = Convert.ToInt(args.Get(0));
            maxHealth = Convert.ToInt(args.Get(1));
            self._currentHealth = health;
            self._maxHealth = maxHealth;
            
            Game.SetPlaylist("Battle");
            self.Blind();
            self.UpdateHealth();
            self._transform.Position = self.RevealPosition;
            self._state = "idle";
        }
        elif (call == "Die")
        {
            self.Die();
        }
    }

    function OnPlayerJoin(player)
    {
        if (Network.IsMasterClient)
        {
            if (self._kickedDoor && self._door_broken.Active == true)
            {
                self.NetworkView.SendMessage(player, "ChangeDoor|True");
            }
            self.NetworkView.SendMessage(player, "Reveal|" + self._currentHealth + "/" + self._maxHealth);
        }
    }

    function ColossalSteam(damage)
    {
        pos1 = self._transform.Position + self._transform.Up * 185.0;
        pos2 = self._transform.Position + self._transform.Up * 303.0;
        pos3 = self._transform.Position + self._transform.Up * 50.0;

        if (damage)
        {
            self.Instantiate("Scene,Custom/colossaltitan/colossal_steam_dmg,552,0,1,1,1,0,colossal_steam_dmg," + pos1.X + "," + pos1.Y + "," + pos1.Z + ",270,0,0,1,1,1,Region,Characters,Default,DefaultNoTint|255/255/255/255,");
            self.Instantiate("Scene,Custom/colossaltitan/colossal_steam_dmg,552,0,1,1,1,0,colossal_steam_dmg," + pos2.X + "," + pos2.Y + "," + pos2.Z + ",270,0,0,1,1,1,Region,Characters,Default,DefaultNoTint|255/255/255/255,");
            self.Instantiate("Scene,Custom/colossaltitan/colossal_steam_dmg,552,0,1,1,1,0,colossal_steam_dmg," + pos3.X + "," + pos3.Y + "," + pos3.Z + ",270,0,0,1,1,1,Region,Characters,Default,DefaultNoTint|255/255/255/255,");
            self.CreateExplosionAt(pos1, "Colossal Steam", 56.9, 150.0);
            self.CreateExplosionAt(pos2, "Colossal Steam", 56.9, 150.0);
            self.CreateExplosionAt(pos3, "Colossal Steam", 56.9, 150.0);
        }
        else
        {
            self.Instantiate("Scene,Custom/colossaltitan/colossal_steam,552,0,1,1,1,0,colossal_steam," + pos1.X + "," + pos1.Y + "," + pos1.Z + ",270,0,0,1,1,1,Region,Characters,Default,DefaultNoTint|255/255/255/255,");
            self.Instantiate("Scene,Custom/colossaltitan/colossal_steam,552,0,1,1,1,0,colossal_steam," + pos2.X + "," + pos2.Y + "," + pos2.Z + ",270,0,0,1,1,1,Region,Characters,Default,DefaultNoTint|255/255/255/255,");
            self.Instantiate("Scene,Custom/colossaltitan/colossal_steam,552,0,1,1,1,0,colossal_steam," + pos3.X + "," + pos3.Y + "," + pos3.Z + ",270,0,0,1,1,1,Region,Characters,Default,DefaultNoTint|255/255/255/255,");
        }
    }

    function AttackSweep(type)
    {
        self.CallTitans();
        self._state = "attack_sweep";
        self._attackAnimation = "sweep" + type;
        self._checkHitCapsuleStart = self._foreArmR;
        self._checkHitCapsuleEnd = self._handR;
        self._attackChkOnce = false;
        self._sweepSmokeObject.ToggleParticle(true);
        
        self.PlayAnimation("attack_" + self._attackAnimation, 0.1);
        
        if (Network.IsMasterClient)
        {
            self.NetworkView.SendMessageOthers("ToggleSweepSmoke|True");
        }
    }

    function BlowAwayHuman(human)
    {
        if (human != null)
        {
            vector = ((self._neck.Position + self._transform.Forward * 50.0) - human.Position);
            if (Network.IsMasterClient)
            {
                force = vector.Normalized * 20.0 + Vector3.Up;
                human.AddForce(force, "Impulse");
                human.ClearHooks();
            }
        }
    }

    function SpawnTitan(special)
    {
        if (special || Game.Titans.Count <= 6)
        {
            type = "Normal";

            if (special)
            {
                type = "Abnormal";

                punkChance = 0.0;
                throwerChance = 0.0;

                if (self._difficulty == 3)
                {
                    punkChance = 0.2;
                    throwerChance = 0.0;
                }
                elif (self._difficulty == 4)
                {
                    punkChance = 0.3;
                    throwerChance = 0.2;
                }

                if (Random.RandomFloat(0.0, 1.0) < punkChance)
                {
                    if (Random.RandomFloat(0.0, 1.0) < throwerChance)
                    {
                        type = "Thrower";
                    }
                    else
                    {
                        type = "Punk";
                    }
                }
            }
            else
            {
                typeChance = 0.3;
                punkChance = 0.3;
                throwerChance = 0.0;
                if (self._difficulty == 2)
                {
                    typeChance = 0.6;
                    punkChance = 0.3;
                }
                elif (self._difficulty == 3)
                {
                    typeChance = 1.0;
                    punkChance = 0.3;
                    throwerChance = 0.1;
                }
                elif (self._difficulty == 4)
                {
                    typeChance = 1.0;
                    punkChance = 0.3;
                    throwerChance = 0.3;
                }
                if (Game.Titans.Count == 5)
                {
                    type = "Crawler";
                }
                elif (Random.RandomFloat(0.0, 1.0) < typeChance)
                {
                    if (Random.RandomFloat(0.0, 1.0) < punkChance)
                    {
                        if (Random.RandomFloat(0.0, 1.0) < throwerChance)
                        {
                            type = "Thrower";
                        }
                        else
                        {
                            type = "Punk";
                        }
                    }
                    else
                    {
                        type = "Abnormal";
                    }
                }
            }
            
            titan = Game.SpawnTitan(type);
            
            if (special && self._civilians != null)
            {
                titan.UsePathfinding = true;
                titan.DetectRange = 30;
                titan.FocusRange = 20;
                titan.MoveTo(self._civilians.Position, 20.0, true);
            }
            Game.SpawnEffect("TitanSpawn", titan.Position, Vector3(-90.0, 0.0, 0.0), titan.Size);
        }
    }

    function CallTitans()
    {
        if (self._difficulty == 0)
        {
            return;
        }

        self._attackCount += 1;
        normal = 4;
        special = 7;
        if (self._difficulty != 1)
        {
            if (self._difficulty == 2)
            {
                normal = 4;
                special = 6;
            }
            elif (self._difficulty == 3)
            {
                normal = 3;
                special = 5;
            }
            elif (self._difficulty == 4)
            {
                normal = 2;
                special = 4;
            }
        }
        if (Math.Mod(self._attackCount, normal) == 0)
        {
            self.SpawnTitan(false);
        }
        if (self._currentHealth < self._maxHealth * 0.3)
        {
            if (Math.Mod(self._attackCount, Convert.ToInt(special * 0.5)) == 0)
            {
                self.SpawnTitan(true);
            }
        }
        elif (Math.Mod(self._attackCount, special) == 0)
        {
            self.SpawnTitan(true);
        }
    }

    function ChangeDoor(onJoined)
    {
        self._door_broken.Active = true;
        self._door_closed.Active = false;
        
        if (onJoined)
        {
            Map.CreateMapObjectRaw("Scene,Custom/colossaltitan/rock,553,0,1,0,1,0,rock,0,10,676,0,0,0,1,1,1,Physical,All,Default,DefaultNoTint|255/255/255/255,RockScript|Disabled:true");
        }
    }

    function MoveHitCapsule(start, end)
    {
        radius = 30.0 + self._difficulty * 2;

        fromTo = start - end;
        center = (start + end) / 2.0;
        self._hitCapsule.MapObject.Position = center;
        self._hitCapsule.MapObject.Up = fromTo.Normalized;
        self._hitCapsule.MapObject.Scale = Vector3(radius, fromTo.Magnitude / 2 + 10, radius);
    }

    function GetNearestHuman()
    {
        self._myHero = Utils.GetClosest(self._transform.Position, Game.Humans);
    }
    
    function UpdateHealth()
    {
        if (self._currentHealth > 0)
        {
            str = "7FFF00";

            num2 = Convert.ToFloat(self._currentHealth) / Convert.ToFloat(self._maxHealth);

            if (num2 < 0.75 && num2 >= 0.5)
            {
                str = "f2b50f";
            }
            elif (num2 < 0.5 && num2 >= 0.25)
            {
                str = "ff8100";
            }
            elif (num2 < 0.25)
            {
                str = "ff3333";
            }
            UI.SetLabelAll("TopCenter", "Colossal Titan Health: <color=#" + str + ">" + self._currentHealth + "</color>");
        }
        else
        {
            UI.SetLabelAll("TopCenter", "");
        }
    }

    function NeckSteam()
    {
        self._isSteamNeed = true;
        self.StartNeckSteam();
        if (Network.IsMasterClient)
        {
            self.NetworkView.SendMessageOthers("StartNeckSteam");
        }
        for (human in Game.Humans)
        {
            if ((human.Position - self._napeCollider.MapObject.Position).Magnitude <= 30.0)
            {
                self.BlowAwayHuman(human);
            }
        }
    }

    function Idle()
    {
        self._state = "idle";
        self.PlayAnimation("idle", 0.0);
    }

    function Kick()
    {
        self._state = "kick";
        self._actionName = "attack_kick_wall";
        self._attackCheckTime = 0.64;
        self._attackChkOnce = false;
        self.PlayAnimation(self._actionName, 0.1);
    }

    function Die()
    {
        self._hasDied = true;
    }

    function Slap(type)
    {
        self.CallTitans();
        self._state = "slap";
        self._attackAnimation = type;
        if (type == "r1" || type == "r2")
        {
            self._checkHitCapsuleStart = self._handR;
        }
        if (type == "l1" || type == "l2")
        {
            self._checkHitCapsuleStart = self._handL;
        }
        self._attackCheckTime = 0.57;
        self._attackChkOnce = false;
        self.PlayAnimation("attack_slap_" + self._attackAnimation, 0.1);
    }

    function StartNeckSteam()
    {
        self._neckSteamObject.ToggleParticle(false);
        self._neckSteamObject.ToggleParticle(true);
    }

    function Steam()
    {
        self.CallTitans();
        self._state = "steam";
        self._actionName = "attack_steam";
        self._attackCheckTime = 0.45;
        self._attackChkOnce = false;
        self.PlayAnimation(self._actionName, 0.1);
    }

    function ToggleSweepSmoke(enabled)
    {
        self._sweepSmokeObject.ToggleParticle(enabled);
    }

    function JustPlayAnimation(aniName, fade)
    {
        self._animation.Fade = fade;
        self._animation.ChangeAnimation(aniName);
        self._animationStart = Time.GameTime;
        self._animationLength = self._transform.GetAnimationLength(aniName);
    }

    function PlayAnimation(aniName, time)
    {
        self.JustPlayAnimation(aniName, time);

        if (Network.IsMasterClient)
        {
            self.NetworkView.SendMessageOthers("PlayAnimation|" + aniName + "/" + time);
        }
    }

    function GetAnimationNormalizedTime()
    {
        return (Time.GameTime - self._animationStart) / self._animationLength;
    }

    function CreateDummy()
    {
        self._dummyTitan = Game.SpawnTitanAt("Dummy", self._transform.Position + Vector3.Down * 1000);
        self._dummyTitan.Health = 1;
        self._dummyTitan.MaxHealth = 1;
    }

    function HandleCollision(region, type, other)
    {
        if (type == "enter" && other.Type == "Human")
        {
            if (region.MapObject.Name == "KillCollider" || (region.MapObject.Name == "SweepCollider" && self._HitCapsuleEnabled))
            {
                other.GetKilled(self._name);
            }
        }
    }

    function GetDamaged(player, damage, type)
    {
        if (self._healthTime <= 0.0)
        {
            if (!Game.GetTitanSetting("TitanArmorEnabled") || damage >= Game.GetTitanSetting("TitanArmor"))
            {
                self._currentHealth -= damage;
            }
            self.NeckSteam();
            if (self._currentHealth <= 0)
            {
                self._currentHealth = 0;
                if (!self._hasDied && Network.IsMasterClient)
                {
                    self.NetworkView.SendMessageAll("Die");
                }
            }
            else
            {
                if (Network.IsMasterClient)
                {
                    #Game.ShowKillFeedAll(polayer.name, self._name, damage, type);
                    self._dummyTitan.GetDamaged(player.Name, damage);
                    self.CreateDummy();
                }
            }
            self.UpdateHealth();
        }
        self._healthTime = 0.2;
    }

    function HandleHit(region, character, name, damage, type)
    {
        if (character.Type == "Human" && region.MapObject.Name == "NapeCollider")
        {
            self.NetworkView.SendMessageAll("Damage|" + damage + "/" + type);
            
        }
    }

    coroutine Blind()
    {
        overlay = Map.CreateMapObjectRaw("Scene,Custom/colossaltitan/overlay,1000,0,1,0,1,0,overlay,0,0,0,0,0,0,1,1,1,None,Characters,Default,DefaultNoTint|255/255/255/255,");
        time = 2.0;
        while (time > 0.0)
        {
            time = Math.Max(time - Time.FrameTime, 0.0);
            overlay.Color = Color(255,255,255,Convert.ToInt(255 * 0.5 * time));
            overlay.Position = Camera.Position;
        }
        Map.DestroyMapObject(overlay, true);
    }

    function Instantiate(rawdata)
    {
        self.NetworkView.SendMessageOthers("Instantiate|" + rawdata);
        return Map.CreateMapObjectRaw(rawdata);
    }

    function CreateExplosionAt(position, name, killRadius, pushRadius)
    {
        rad1 = killRadius * 2;
        rad2 = pushRadius * 2;
        self.Instantiate("Scene,Geometry/Sphere1,686,0,1,0,0,0,Push," + position.X + "," + position.Y + "," + position.Z + ",0,0,0," + rad2 + "," + rad2 + "," + rad2 + ",Region,Characters,Default,DefaultNoTint|255/255/255/255,DestroySelf|Time:1.0|DestroyChildren:true,PushRegion");
        self.Instantiate("Scene,Geometry/Sphere1,645,0,1,0,0,0,KillCollider," + position.X + "," + position.Y + "," + position.Z + ",0,0,0," + rad1 + "," + rad1 + "," + rad1 + ",Region,Characters,Default,DefaultNoTint|255/255/255/255,CollisionTrigger|OnHit:false|OnHooked:false,DestroySelf|Time:0.1|DestroyChildren:true").GetComponent("CollisionTrigger").SetHandler(self);
    }
}

component RockScript
{
    Disabled = false;

    _desPt =  Vector3(-200.0, 10.0, -280.0);
    _g = 500.0;
    _speed = 800.0;
    _vh = Vector3(0,0,0);
    _vv = Vector3(0,0,0);

    function Init()
    {
        if (self.Disabled)
        {
            self.MapObject.Position = self._desPt;
        }
        else
        {
            self.MapObject.Position = Vector3(0.0, 10.0, 676.0);
            self._vh = self._desPt - self.MapObject.Position;
            self._vv = Vector3(0.0, self._g * self._vh.Magnitude / (2.0 * self._speed), 0.0);
            self._vh = self._vh.Normalized * self._speed;
        }
    }

    function OnTick()
    {
        if (!self.Disabled)
        {
            self._vv += Vector3.Down * self._g * Time.TickTime;
            self.MapObject.Position = self.MapObject.Position + (self._vv + self._vh) * Time.TickTime;
            if ((self._desPt - self.MapObject.Position).Magnitude < 20.0 || self.MapObject.Position.Y < 0.0)
            {
                self.Disabled = true;

                self.MapObject.Position = self._desPt;
                pos = self.MapObject.Position + Vector3.Up * 30.0;
                Map.CreateMapObjectRaw("Scene,Custom/colossaltitan/boom1_ct_kick,792,0,1,1,1,0,boom1_ct_kick," + pos.X + "," + pos.Y + "," + pos.Z + ",270,0,0,1,1,1,None,Characters,Default,DefaultNoTint|255/255/255/255,");

                KillRegion = self.MapObject.GetComponent("KillRegion");
                if (KillRegion != null)
                {
                    KillRegion.KillHumans = false;
                    KillRegion.KillTitans = false;
                    KillRegion.KillShifters = false;
                }
            }
        }
    }
}

component PushRegion
{
    _count = 0;
    _active_me = true;

    function OnFrame()
    {
        if (self._count > 1)
        {
            self._active_me = false;
        }
        else
        {
            self._count += 1;
        }
    }

    function OnCollisionStay(other)
    {
        if (self._active_me)
        {
            if (other.Type == "Human")
            {
                vector = other.Position - self.MapObject.Position;
                num2 = self.MapObject.Scale.X / 2.0;
                num3 = Math.Max(5.0, num2 - vector.Magnitude);
                other.AddForce(vector.Normalized * num3 + Vector3.Up * 1.0, "Impulse");
            }
        }
    }
}
component CollisionTrigger
{
    Description = "Sends a trigger when detecting collisions. The handler needs to be defined using custom logic.";

    OnCollision = true;
    OnHit = true;
    OnHooked = true;
    _handler = null;

    function SetHandler(handler)
    {
        self._handler = handler;
    }
    
    function OnCollisionEnter(other)
    {
        if (self._handler != null && self.OnCollision)
        {
            self._handler.HandleCollision(self, "enter", other);
        }
    }

    function OnCollisionStay(other)
    {
        if (self._handler != null && self.OnCollision)
        {
            self._handler.HandleCollision(self, "stay", other);
        }
    }

    function OnCollisionExit(other)
    {
        if (self._handler != null && self.OnCollision)
        {
            self._handler.HandleCollision(self, "exit", other);
        }
    }

    function OnGetHit(character, name, damage, type)
    {
        if (self._handler != null && self.OnHit)
        {
            self._handler.HandleHit(self, character, name, damage, type);
        }
    }

    function OnGetHooked(human, hookPos, leftHook)
    {
        if (self._handler != null && self.OnHooked)
        {
            self._handler.HandleHook(self, human, hookPos, leftHook);
        }
    }
}

component DestroySelf
{
    Time = 10.0;
    DestroyChildren = true;
    ActiveOnAwake = true;
    _active = false;

    function Init()
    {
        if (self.ActiveOnAwake)
        {
            self._active = true;
        }
    }

    function OnTick()
    {
        if (self._active)
        {
            self.Time -= Time.TickTime;
            if (self.Time <= 0)
            {
                Map.DestroyMapObject(self.MapObject, self.DestroyChildren);
            }
        }
    }
}

extension Utils
{
    function GetClosest(point, list)
    {
        if (list.Count == 1)
        {
            return list.Get(0);
        }
        maxDistance = Math.Infinity;
        closest = null;
        for(entity in list)
        {
            distance = (entity.Position - point).Magnitude;
            if (distance < maxDistance)
            {
                closest = entity;
                maxDistance = distance;
            }
        }

        return closest;
    }
}

extension MathX
{
    function Atan2(y, x)
    {
        if (x > 0)
        {
            return Math.Deg2Rad(Math.Atan(y / x));
        }
        elif (x < 0 && y >= 0)
        {
            return Math.Deg2Rad(Math.Atan(y / x)) + Math.PI;
        }
        elif (x < 0 && y < 0)
        {
            return Math.Deg2Rad(Math.Atan(y / x)) - Math.PI;
        }
        elif (x == 0 && y > 0)
        {
            return Math.PI / 2;
        }
        elif (x == 0 && y < 0)
        {
            return -Math.PI / 2;
        }
        return 0;
    }
}
