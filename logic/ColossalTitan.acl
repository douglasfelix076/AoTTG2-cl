class Main
{
    function Init()
    {
        Map.UpdateNavMeshAsync();

        region = Map.FindMapObjectByName("TitanWarning");
        if (region != null)
        {
            region.GetComponent("CollisionRegion").SetHandler(self);
        }
        region2 = Map.FindMapObjectByName("TitanWarning2");
        if (region2 != null)
        {
            region2.GetComponent("CollisionRegion").SetHandler(self);
        }
    }

    function OnGameStart()
    {
        if (Network.MyPlayer.Status != "Alive")
        {
            Camera.SetManual(true);
            Camera.SetPosition(Map.FindMapObjectByName("cameraDefaultPosition").Position);
            Camera.SetManual(false);
        }
    }

    function OnCharacterDie(victim, killer, killerName)
    {
        if (victim.Type == "Human" && !Game.IsEnding)
        {
            if (Game.Humans.Count == 0)
            {
                Game.End(10.0);
                UI.SetLabel("MiddleCenter", "Humanity fail!");
            }
        }
    }

    function OnCollision(name, type, other)
    {
        if (type == "enter" && other.Type == "Titan")
        {
            if (name == "TitanWarning2")
            {
                other.AddOutline(Color(255,255,255), "OutlineAll");
            }
            else
            {
                other.Reveal(5.0);
            }

            message = "<color=#A8FF24><b>WARNING!</b> An abnormal titan is approaching the north gate!</color>";
            Game.Print(message);
        }
    }
}

component NapeCollider
{
    _handler = null;

    function Set(handler)
    {
        self._handler = handler;
    }

    function OnGetHit(character, name, damage, type)
    {
        self._handler.OnNapeHit(character, name, damage, type);
    }
}

component ColossalTitan
{
    Name = "Colossal Titan";
    MaxHealth = 0;
    _healthTime = 0.0;
    _CurrrentHealth = 10000;
    _CurrrentHealthTotal = 10000;
    
    _transform = null;
    _animation = null;
    _scale = 1.0;
    _difficulty = 2;
    _state = "idle";
    _myHero = null;
    _lagMax = 0.0;
    _waitTime = 2.0;
    _myDistance = 0.0;
    _actionName = "";
    _attackAnimation = "";
    _attackCheckTime = 0.0;
    _attackCheckTimeA = 0.0;
    _attackCheckTimeB = 0.0;
    _attackChkOnce = false;
    _attackCount = 0;
    _attackPattern = 0-1;
    _animationLength = 0.0;
    _animationStart = 0.0;
    _checkHitCapsuleEnd = null;
    _checkHitCapsuleEndOld = Vector3(0,0,0);
    _checkHitCapsuleR = 0.0;
    _checkHitCapsuleStart = null;
    _NeckSteamObject = null;
    _sweepSmokeObject = null;
    _neck = null;
    _napeCollider = null;
    _dummyTitan = null;
    _door_broken = null;
    _door_closed = null;
    _hasDie = false;
    _hasspawn = false;
    _healthLabel = null;
    _isSteamNeed = false;

    function Init()
    {
        self._transform = self.MapObject.Transform;
        self._animation = self.MapObject.GetComponent("Animator");
        self._difficulty = Game.GetGeneralSetting("Difficulty");
        self._neck = self._transform.GetTransform("Amarture/Core/Controller_Body/hip/spine/chest/neck");
        self._NeckSteamObject = self._neck.GetTransform("colossal_smoke_hit");
        self._sweepSmokeObject = self._transform.GetTransform("Amarture/Core/Controller_Body/hip/spine/chest/shoulder_R/upper_arm_R/forearm_R/sweep_smoke");
        self._napeCollider = Map.CreateMapObjectRaw("Scene,Geometry/Sphere1,645,0,1,1,1,0,NapeCollider,0,0,0,0,0,0,3.2,3.2,3.2,Region,Hitboxes,Default,DefaultNoTint|255/255/255/255,NapeCollider|");
        self._napeCollider.GetComponent("NapeCollider").Set(self);
        self._CurrrentHealth = 1000;
        flag = Game.GetMiscSetting("EndlessRespawnEnabled");
        if (self._difficulty == 1)
        {
            if (!flag)
            {
                self._CurrrentHealth = 5000;
            }
            else
            {
                self._CurrrentHealth = 2000;
            }
        }
        elif (self._difficulty == 2)
        {
            if (!flag)
            {
                self._CurrrentHealth = 8000;
            }
            else
            {
                self._CurrrentHealth = 3500;
            }
        }
        elif (self._difficulty == 3)
        {
            if (!flag)
            {
                self._CurrrentHealth = 12000;
            }
            else
            {
                self._CurrrentHealth = 5000;
            }
        }
        self._CurrrentHealthTotal = self._CurrrentHealth;
        self._state = "wait";
        self.GetNearestHero();
        self._transform.Position = Vector3.Down * 10000.0;
        self._door_broken = Map.FindMapObjectByName("door_broken");
        self._door_closed = Map.FindMapObjectByName("door_closed");
        self._door_broken.Active = false;
        self._door_closed.Active = true;
        self._scale = 20.0;

        if (Network.IsMasterClient)
        {
            if (Game.GetTitanSetting("TitanSpawnEnabled"))
            {
                min = Game.GetTitanSetting("TitanSizeMin");
                max = Game.GetTitanSetting("TitanSizeMax");
                self._scale = Random.RandomFloat(min, max);
            }
            self._lagMax = 150.0 + self._scale * 3.0;
            self._healthTime = 0.0;
            self.MaxHealth = self._CurrrentHealth;
            if (Game.GetTitanSetting("TitanHealthMode") > 0)
            {
                min = Game.GetTitanSetting("TitanHealthMin");
                max = Game.GetTitanSetting("TitanHealthMax");
                health = Random.RandomFloat(min, max);
                self.MaxHealth = health;
                self._CurrrentHealth = health;
            }
            if (self._CurrrentHealth > 0)
            {
                #self.NetworkView.SendMessage("LabelRPC", PhotonTargets.AllBuffered, new object[] { self._CurrrentHealth, self.MaxHealth });
            }
        
            self._dummyTitan = Game.SpawnTitanAt("Dummy", self.MapObject.Position + Vector3.Down * 100);
            self._dummyTitan.Health = self._CurrrentHealth;
            self._dummyTitan.MaxHealth = self.MaxHealth;
        }

        self._hasspawn = true;
    }

    function OnTick()
    {
        self._healthTime -= Time.TickTime;
        self.updateLabel();
        if (self._state != "null")
        {
            if (self._state == "wait")
            {
                self._waitTime -= Time.TickTime;
                if (self._waitTime <= 0.0)
                {
                    self._transform.Position = new Vector3(30.0, 9.0, 784.0);
                    Game.SpawnEffect("ShifterThunder", self._transform.Position + Vector3.Up * 350.0, Vector3(0.0, 0.0, 0.0), self._scale);
                    self.Blind();
                    if (Network.IsMasterClient)
                    {
                        self.Idle();
                    }
                    else
                    {
                        self._state = "null";
                    }
                }
            }
            elif (self._state != "idle")
            {
                normalized = self.GetAnimationNormalizedTime();
                if (self._state == "attack_sweep")
                {
                    if (self._attackCheckTimeA != 0.0 && ((normalized >= self._attackCheckTimeA && normalized <= self._attackCheckTimeB) || (!self._attackChkOnce && normalized >= self._attackCheckTimeA)))
                    {
                        self._attackChkOnce = true;
                        /*
                        for (RaycastHit hit in self._checkHitCapsule(self._checkHitCapsuleStart.Position, self._checkHitCapsuleEnd.Position, self._checkHitCapsuleR))
                        {
                            GameObject gameObject = hit.collider.gameObject;
                            if (gameObject.tag == "Player")
                            {
                                self.KillPlayer(gameObject);
                            }
                            if ((((gameObject.tag == "erenHitbox") && (self._attackAnimation == "combo_3"))) && (!false ? Network.IsMasterClient : Network.isServer))
                            {
                                gameObject.transform.root.gameObject.GetComponent<TITAN_EREN>().hitByFTByServer(3);
                            }
                        }
                        for (RaycastHit hit2 in self._checkHitCapsule(self._checkHitCapsuleEndOld, self._checkHitCapsuleEnd.Position, self._checkHitCapsuleR))
                        {
                            GameObject hitHero = hit2.collider.gameObject;
                            if (hitHero.tag == "Player")
                            {
                                self.KillPlayer(hitHero);
                            }
                        }
                        */
                        self._checkHitCapsuleEndOld = self._checkHitCapsuleEnd.Position;
                    }
                    if (normalized >= 1.0)
                    {
                        self._sweepSmokeObject.ToggleParticle(false);
                        self.NetworkView.SendMessageOthers("ToggleSweepSmokeRPC|False");
                        self.GetNearestHero();
                        self.Idle();
                        self.PlayAnimation("idle", 0.0);
                    }
                }
                elif (self._state == "kick")
                {
                    if (!self._attackChkOnce && normalized >= self._attackCheckTime)
                    {
                        self._attackChkOnce = true;
                        self._door_broken.Active = true;
                        self._door_closed.Active = false;
                        pos = (self._transform.Position + self._transform.Forward * 120.0) + (self._transform.Right * 30.0);
                        Map.CreateMapObjectRaw("Scene,Custom/colossaltitan/boom1_ct_kick,792,0,1,1,1,0,boom1_ct_kick," + pos.X + "," + pos.Y + "," + pos.Z + ",270,0,0,1,1,1,None,Characters,Default,DefaultNoTint|255/255/255/255,");
                        Map.CreateMapObjectRaw("Scene,Custom/colossaltitan/rock,552,0,1,0,1,0,rock,0,0,676.0,0,0,0,1,1,1,Physical,All,Default,DefaultNoTint|255/255/255/255,KillRegion|Team:None|KillHumans:true|KillTitans:true|KillShifters:true|KillMessage:Rock,RockScript|");
                        Utils.CreateDamageRegionAt(pos, self.Name, 62.99, 156.49);
                    }
                    if (normalized >= 1.0)
                    {
                        self.GetNearestHero();
                        self.Idle();
                        self.PlayAnimation("idle", 0.0);
                    }
                }
                elif (self._state == "slap")
                {
                    if (!self._attackChkOnce && normalized >= self._attackCheckTime)
                    {
                        self._attackChkOnce = true;
                        Game.SpawnEffect("Boom1", self._checkHitCapsuleStart.Position, Vector3(270.0, 0.0, 0.0), 5.0);
                        Utils.CreateDamageRegionAt(self._checkHitCapsuleStart.Position, self.Name, 30.0, 60.0);
                    }
                    if (normalized >= 1.0)
                    {
                        self.GetNearestHero();
                        self.Idle();
                        self.PlayAnimation("idle", 0.0);
                    }
                }
                elif (self._state == "steam")
                {
                    if (!self._attackChkOnce && normalized >= self._attackCheckTime)
                    {
                        self._attackChkOnce = true;
                        self.ColossalSteam(false);
                    }
                    if (normalized >= 1.0)
                    {
                        self.ColossalSteam(true);
                        if (self._hasDie)
                        {
                            Game.End(10.0);
                            UI.SetLabel("MiddleCenter", "Humanity win!");
                            if (Network.IsMasterClient)
                            {
                                self._transform.Position = Vector3.Down * 1000.0;
                                Map.DestroyMapObject(self.MapObject, true);
                            }
                        }
                        self.GetNearestHero();
                        self.Idle();
                        self.PlayAnimation("idle", 0.0);
                    }
                }
            }
            elif (self._attackPattern == 0-1)
            {
                self.Slap("r1");
                self._attackPattern += 1;
            }
            elif (self._attackPattern == 0)
            {
                self.AttackSweep("");
                self._attackPattern += 1;
            }
            elif (self._attackPattern == 1)
            {
                self.Steam();
                self._attackPattern += 1;
            }
            elif (self._attackPattern == 2)
            {
                self.Kick();
                self._attackPattern += 1;
            }
            elif (self._isSteamNeed || self._hasDie)
            {
                self.Steam();
                self._isSteamNeed = false;
            }
            elif (self._myHero == null)
            {
                self.GetNearestHero();
            }
            else
            {
                vector = self._myHero.Position - self._transform.Position;
                current = 0 - MathX.Atan2(vector.Z, vector.X) * Math.Rad2DegConstant;
                f = 0 - MathX.DeltaAngle(current, self._transform.Rotation.Y - 90.0);
                self._myDistance = vector.Magnitude;
                num4 = self._myHero.Position.Y - self._transform.Position.Y;
                if (self._myDistance < 85.0 && Random.RandomInt(0, 100) < 5)
                {
                    self.Steam();
                }
                else
                {
                    if (num4 > 310.0 && num4 < 350.0)
                    {
                        if (Vector3.Distance(self._myHero.Position, self._transform.GetTransform("APL1").Position) < 40.0)
                        {
                            self.Slap("l1");
                            return;
                        }
                        if (Vector3.Distance(self._myHero.Position, self._transform.GetTransform("APL2").Position) < 40.0)
                        {
                            self.Slap("l2");
                            return;
                        }
                        if (Vector3.Distance(self._myHero.Position, self._transform.GetTransform("APR1").Position) < 40.0)
                        {
                            self.Slap("r1");
                            return;
                        }
                        if (Vector3.Distance(self._myHero.Position, self._transform.GetTransform("APR2").Position) < 40.0)
                        {
                            self.Slap("r2");
                            return;
                        }
                        if (self._myDistance < 150.0 && Math.Abs(f) < 80.0)
                        {
                            self.AttackSweep("");
                            return;
                        }
                    }
                    if (num4 < 300.0 && Math.Abs(f) < 80.0 && self._myDistance < 85.0)
                    {
                        self.AttackSweep("_vertical");
                    }
                    else
                    {
                        attack = Random.RandomInt(0, 7);
                        if (attack == 0)
                        {
                            self.Slap("l1");
                        }
                        elif (attack == 1)
                        {
                            self.Slap("l2");
                        }
                        elif (attack == 2)
                        {
                            self.Slap("r1");
                        }
                        elif (attack == 3)
                        {
                            self.Slap("r2");
                        }
                        elif (attack == 4)
                        {
                            self.AttackSweep("");
                        }
                        elif (attack == 5)
                        {
                            self.AttackSweep("_vertical");
                        }
                        elif (attack == 6)
                        {
                            self.Steam();
                        }
                    }
                }
            }
        }
    }
    
    function OnLateFrame()
    {
        self._napeCollider.Position = self._neck.TransformPoint(Vector3(0-1.7, 0.0, 0-2.95));
    }

    function OnNetworkMessage(sender, message) 
    {
        #Game.Print("<color=white>RPC:</color> <color=green>" + message + "</color>");
        
        split = String.Split(message, "|");

        if (split.Count < 1)
        {
            return;
        }

        call = split.Get(0);
        args = List();
        
        if (call == "ChangeDoorRPC")
        {
            self.ChangeDoor();
        }
        elif (call == "LabelRPC")
        {
            health = Convert.ToInt(args.Get(0));
            MaxHealth = Convert.ToInt(args.Get(1));
            self.LabelRPC(health, MaxHealth);
        }
        elif (call == "PlayAnimationRPC")
        {
            aniName = args.Get(0);
            time = Convert.ToFloat(args.Get(1));
            self.JustPlayAnimation(aniName, time);
        }
        elif (call == "DieRPC")
        {
            self.Die();
        }
        elif (call == "StartNeckSteamRPC")
        {
            self.StartNeckSteam();
        }
        elif (call == "ToggleSweepSmokeRPC")
        {
            enabled = Convert.ToInt(args.Get(0));
            self.ToggleSweepSmoke(enabled);
        }
        elif (call == "DamageRPC")
        {
            viewID = Convert.ToInt(args.Get(0));
            speed = Convert.ToInt(args.Get(1));
            self.GetDamaged(viewID, speed);
        }
    }

    coroutine ColossalSteam(damage)
    {
        obj1 = null;
        obj2 = null;
        obj3 = null;
        pos1 = self._transform.Position + self._transform.Up * 185.0;
        pos2 = self._transform.Position + self._transform.Up * 303.0;
        pos3 = self._transform.Position + self._transform.Up * 50.0;
        if (damage)
        {
            obj1 = Map.CreateMapObjectRaw("Scene,Custom/colossaltitan/colossal_steam_dmg,552,0,1,1,1,0,colossal_steam_dmg," + pos1.X + "," + pos1.Y + "," + pos1.Z + ",270,0,0,1,1,1,Region,Characters,Default,DefaultNoTint|255/255/255/255,");
            obj2 = Map.CreateMapObjectRaw("Scene,Custom/colossaltitan/colossal_steam_dmg,552,0,1,1,1,0,colossal_steam_dmg," + pos2.X + "," + pos2.Y + "," + pos2.Z + ",270,0,0,1,1,1,Region,Characters,Default,DefaultNoTint|255/255/255/255,");
            obj3 = Map.CreateMapObjectRaw("Scene,Custom/colossaltitan/colossal_steam_dmg,552,0,1,1,1,0,colossal_steam_dmg," + pos3.X + "," + pos3.Y + "," + pos3.Z + ",270,0,0,1,1,1,Region,Characters,Default,DefaultNoTint|255/255/255/255,");
            Utils.CreateDamageRegionAt(pos1, "Colossal Steam", 56.9, 150.0);
            Utils.CreateDamageRegionAt(pos2, "Colossal Steam", 56.9, 150.0);
            Utils.CreateDamageRegionAt(pos3, "Colossal Steam", 56.9, 150.0);
        }
        elif (true)
        {
            obj1 = Map.CreateMapObjectRaw("Scene,Custom/colossaltitan/colossal_steam,552,0,1,1,1,0,colossal_steam," + pos1.X + "," + pos1.Y + "," + pos1.Z + ",270,0,0,1,1,1,Region,Characters,Default,DefaultNoTint|255/255/255/255,");
            obj2 = Map.CreateMapObjectRaw("Scene,Custom/colossaltitan/colossal_steam,552,0,1,1,1,0,colossal_steam," + pos2.X + "," + pos2.Y + "," + pos2.Z + ",270,0,0,1,1,1,Region,Characters,Default,DefaultNoTint|255/255/255/255,");
            obj3 = Map.CreateMapObjectRaw("Scene,Custom/colossaltitan/colossal_steam,552,0,1,1,1,0,colossal_steam," + pos3.X + "," + pos3.Y + "," + pos3.Z + ",270,0,0,1,1,1,Region,Characters,Default,DefaultNoTint|255/255/255/255,");
        }
        
        wait 5.0;

        Map.DestroyMapObject(obj1, true);
        Map.DestroyMapObject(obj2, true);
        Map.DestroyMapObject(obj3, true);
    }

    function AttackSweep(type)
    {
        self.CallTitanHAHA();
        self._state = "attack_sweep";
        self._attackAnimation = "sweep" + type;
        self._attackCheckTimeA = 0.4;
        self._attackCheckTimeB = 0.57;
        self._checkHitCapsuleStart = self._transform.GetTransform("Amarture/Core/Controller_Body/hip/spine/chest/shoulder_R/upper_arm_R/forearm_R");
        self._checkHitCapsuleEnd = self._transform.GetTransform("Amarture/Core/Controller_Body/hip/spine/chest/shoulder_R/upper_arm_R/forearm_R/hand_R/hand_R_001");
        self._checkHitCapsuleR = 20.0;
        self.PlayAnimation("attack_" + self._attackAnimation, 0.1);
        self._attackChkOnce = false;
        self._sweepSmokeObject.ToggleParticle(true);
        if (Network.IsMasterClient)
        {
            self.NetworkView.SendMessageOthers("ToggleSweepSmokeRPC|True");
        }
    }

    function BlowPlayer(human)
    {
        vector = Vector3.Zero - (self._neck.Position + self._transform.Forward * 50.0 - human.Position);
        if (Network.IsMasterClient)
        {
            force = vector.normalized * 20.0 + Vector3.Up;
            human.AddForce();
        }
    }

    function CallTitan(special)
    {
        if (self._difficulty > 0 && (special || Game.Titans.Count <= 6))
        {
            type = "Normal";

            if (special)
            {
                type = "Abnormal";
            }
            else
            {
                num2 = 0.7;
                num3 = 0.7;
                if (self._difficulty == 2)
                {
                    num2 = 0.4;
                    num3 = 0.7;
                }
                elif (self._difficulty == 3)
                {
                    num2 = 0-1.0;
                    num3 = 0.7;
                }
                if (Game.Titans.Count == 5)
                {
                    type = "Crawler";
                }
                elif (Random.RandomFloat(0.0, 1.0) >= num2)
                {
                    if (Random.RandomFloat(0.0, 1.0) < num3)
                    {
                        type = "Abnormal";
                    }
                    else
                    {
                        type = "Punk";
                    }
                }
            }
            
            titan = Game.SpawnTitan(type);
            
            if (special == true)
            {
                titan.UsePathfinding = true; # forces smart movement
                titan.DetectRange = 30;
                titan.FocusRange = 20;
                titan.MoveTo(Vector3(0, 11, 0-580), 5.0, true);
            }
            Game.SpawnEffect("TitanSpawn", titan.Position, Vector3(0-90.0, 0.0, 0.0), titan.Size);
        }
    }

    function CallTitanHAHA()
    {
        self._attackCount += 1;
        num = 4;
        num2 = 7;
        if (self._difficulty != 0)
        {
            if (self._difficulty == 2)
            {
                num = 4;
                num2 = 6;
            }
            elif (self._difficulty == 3)
            {
                num = 3;
                num2 = 5;
            }
        }
        if (Math.Mod(self._attackCount, num) == 0)
        {
            self.CallTitan(false);
        }
        if (self._CurrrentHealth < self._CurrrentHealthTotal * 0.3)
        {
            if (Math.Mod(self._attackCount, Convert.ToInt(num2 * 0.5)) == 0)
            {
                self.CallTitan(true);
            }
        }
        elif (Math.Mod(self._attackCount, num2) == 0)
        {
            self.CallTitan(true);
        }
    }

    function ChangeDoor()
    {
        self._door_broken.Active = true;
        self._door_closed.Active = false;
    }

    /*
    private RaycastHit[] _checkHitCapsule(Vector3 start, Vector3 end, float r)
    {
        return Physics.SphereCastAll(start, r, end - start, Vector3.Distance(start, end));
    }
    */

    function JustPlayAnimation(aniName, fade)
    {
        self._animation.HasFade = fade > 0.0;
        self._animation.Fade = fade;
        self._animation.ChangeAnimation(aniName);
        self._animationStart = Time.GameTime;
        self._animationLength = self._transform.GetAnimationLength(aniName);
    }

    function PlayAnimation(aniName, time)
    {
        self.JustPlayAnimation(aniName, time);

        if (Network.IsMasterClient)
        {
            self.NetworkView.SendMessageOthers("PlayAnimationRPC|" + aniName + "/" + time);
        }
    }
    
    function GetAnimationNormalizedTime()
    {
        return (Time.GameTime - self._animationStart) / self._animationLength;
    }

    function GetNearestHero()
    {
        self._myHero = Utils.GetClosest(self._transform.Position, Game.Humans);
    }

    function Idle()
    {
        self._state = "idle";
        self.PlayAnimation("idle", 0.2);
    }

    function Kick()
    {
        self._state = "kick";
        self._actionName = "attack_kick_wall";
        self._attackCheckTime = 0.64;
        self._attackChkOnce = false;
        self.PlayAnimation(self._actionName, 0.1);
    }
    
    function KillPlayer(human)
    {
        if (human != null)
        {
            human.GetKilled(self.Name);
        }
    }

    function LabelRPC(health, MaxHealth)
    {
        if (health < 0)
        {
            if (self._healthLabel != null)
            {
                UI.SetLabel("TopCenter", "");
            }
        }
        else
        {
            str = "7FFF00";

            num2 = Convert.ToFloat(health) / Convert.ToFloat(MaxHealth);

            if (num2 < 0.75 && num2 >= 0.5)
            {
                str = "f2b50f";
            }
            elif (num2 < 0.5 && num2 >= 0.25)
            {
                str = "ff8100";
            }
            elif (num2 < 0.25)
            {
                str = "ff3333";
            }
            UI.SetLabel("TopCenter", "Colossal Titan Health: <color=#" + str + ">" + health + "</color>");
        }
        
        /*
        if (health < 0)
        {
            if (self._healthLabel != null)
            {
                #UnityEngine.Object.Destroy(self._healthLabel);
            }
        }
        else
        {
            if (self._healthLabel == null)
            {
                self._healthLabel = (GameObject) UnityEngine.Object.Instantiate(Resources.Load("UI/LabelNameOverHead"));
                self._healthLabel.name = "LabelNameOverHead";
                self._healthLabel.transform.parent = self._transform;
                self._healthLabel.transform.localPosition = new Vector3(0f, 430f, 0.0);
                float a = 15f;
                if ((self._scale > 0.0) && (self._scale < 1.0))
                {
                    a = 15f / self._scale;
                    a = Math.Min(a, 100f);
                }
                self._healthLabel.transform.Scale = new Vector3(a, a, a);
            }
            string str = "[7FFF00]";
            float num2 = Convert.ToFloat(health)) / Convert.ToFloat(MaxHealth);
            if ((num2 < 0.75f) && (num2 >= 0.5))
            {
                str = "[f2b50f]";
            }
            elif ((num2 < 0.5) && (num2 >= 0.25f))
            {
                str = "[ff8100]";
            }
            elif (num2 < 0.25f)
            {
                str = "[ff3333]";
            }
            self._healthLabel.GetComponent<UILabel>().text = str + Convert.ToString(health);
        }
        */
    }

    function NeckSteam()
    {
        self._NeckSteamObject.ToggleParticle(true);
        if (Network.IsMasterClient)
        {
            self.NetworkView.SendMessageOthers("StartNeckSteamRPC");
        }
        self._isSteamNeed = true;
        radius = 30.0;
        /*
        for (Collider collider in Physics.OverlapSphere(self._neck.transform.Position - ((self._transform.Forward * 10.0)), radius))
        {
            if (collider.transform.root.tag == "Player")
            {
                GameObject gameObject = collider.transform.root.gameObject;
                if ((gameObject.GetComponent<TITAN_EREN>() == null) && (gameObject.GetComponent<HERO>() != null))
                {
                    self.BlowPlayer(gameObject);
                }
            }
        }
        */
    }

    function Die()
    {
        self._hasDie = true;
    }

    function Slap(type)
    {
        self.CallTitanHAHA();
        self._state = "slap";
        self._attackAnimation = type;
        if (type == "r1" || type == "r2")
        {
            self._checkHitCapsuleStart = self._transform.GetTransform("Amarture/Core/Controller_Body/hip/spine/chest/shoulder_R/upper_arm_R/forearm_R/hand_R/hand_R_001");
        }
        if (type == "l1" || type == "l2")
        {
            self._checkHitCapsuleStart = self._transform.GetTransform("Amarture/Core/Controller_Body/hip/spine/chest/shoulder_L/upper_arm_L/forearm_L/hand_L/hand_L_001");
        }
        self._attackCheckTime = 0.57;
        self._attackChkOnce = false;
        self.PlayAnimation("attack_slap_" + self._attackAnimation, 0.1);
    }

    function StartNeckSteam()
    {
        self._NeckSteamObject.ToggleParticle(false);
        self._NeckSteamObject.ToggleParticle(true);
    }

    function ToggleSweepSmoke(enabled)
    {
        self._sweepSmokeObject.ToggleParticle(enabled);
    }

    function Steam()
    {
        self.CallTitanHAHA();
        self._state = "steam";
        self._actionName = "attack_steam";
        self._attackCheckTime = 0.45;
        self.PlayAnimation(self._actionName, 0.1);
        self._attackChkOnce = false;
    }

    function GetDamaged(viewID, speed)
    {
        human = Game.FindCharacterByViewID(viewID);
        if (human != null)
        {
            vector = human.Position - self._neck.Position;
            if (vector.Magnitude < self._lagMax && self._healthTime <= 0.0)
            {
                if (!Game.GetTitanSetting("TitanArmorEnabled") || speed >= Game.GetTitanSetting("TitanArmor"))
                {
                    self._CurrrentHealth -= speed;
                }
                if (self.MaxHealth > 0.0)
                {
                    #self.NetworkView.SendMessage("LabelRPC", PhotonTargets.AllBuffered, new object[] { self._CurrrentHealth, self.MaxHealth });
                }
                self.NeckSteam();
                if (self._CurrrentHealth <= 0)
                {
                    self._CurrrentHealth = 0;
                    if (!self._hasDie)
                    {
                        self.NetworkView.SendMessageAll("DieRPC");
                        #GameObject.Find("MultiplayerManager").GetComponent<FengGameManagerMKII>().titanGetKill(human.Player, speed, self.Name);
                    }
                }
                else
                {
                    /*
                    GameObject.Find("MultiplayerManager").GetComponent<FengGameManagerMKII>().sendKillInfo(false, (string) human.Player.customProperties[PhotonPlayerProperty.name], true, "Colossal Titan's neck", speed);
                    object[] parameters = new object[] { speed };
                    GameObject.Find("MultiplayerManager").GetComponent<FengGameManagerMKII>().photonView.RPC("netShowDamage", human.Player, speed);
                    */
                }
                self._healthTime = 0.2;
            }
        }
    }
    
    function OnNapeHit(character, name, damage, type)
    {
        if (character.Type == "Human")
        {
            self.GetDamaged(character.ViewID, damage);
        }
    }

    coroutine Blind()
    {
        _flashOverlay = Map.CreateMapObjectRaw("Scene,Custom/colossaltitan/overlay,1000,0,1,0,1,0,overlay,0,0,0,0,0,0,1,1,1,None,Characters,Default,DefaultNoTint|255/255/255/255,");
        time = 2.0;
        while (time > 0.0)
        {
            time = Math.Max(time - Time.FrameTime, 0.0);
            _flashOverlay.Color = Color(255,255,255,Convert.ToInt(255 * 0.5 * time));
            _flashOverlay.Position = Camera.Position;
        }
        Map.DestroyMapObject(_flashOverlay, true);
    }

    function updateLabel()
    {
        /*
        if ((self._healthLabel != null) && self._healthLabel.GetComponent<UILabel>().isVisible)
        {
            self._healthLabel.transform.LookAt(((Vector3) (2f * self._healthLabel.transform.Position)) - Camera.main.transform.Position);
        }
        */
    }

}

component RockScript
{
    _desPt =  Vector3(0-200.0, 10.0, 0-280.0);
    _disable = false;
    _g = 500.0;
    _speed = 800.0;
    _vh = Vector3(0,0,0);
    _vv = Vector3(0,0,0);

    function Init()
    {
        self.MapObject.Position = Vector3(0.0, 10.0, 676.0);
        self._vh = self._desPt - self.MapObject.Position;
        self._vv = Vector3(0.0, self._g * self._vh.Magnitude / (2.0 * self._speed), 0.0);
        self._vh = self._vh.Normalized * self._speed;
    }

    function OnTick()
    {
        if (!self._disable)
        {
            self._vv += Vector3.Zero - Vector3.Up * self._g * Time.TickTime;
            self.MapObject.Position = self.MapObject.Position + self._vv * Time.TickTime;
            self.MapObject.Position = self.MapObject.Position + self._vh * Time.TickTime;
            if (((self._desPt - self.MapObject.Position).Magnitude < 20.0) || (self.MapObject.Position.Y < 0.0))
            {
                self.MapObject.Position = self._desPt;
                pos = self.MapObject.Position + (Vector3.Up * 30.0);
                Map.CreateMapObjectRaw("Scene,Custom/colossaltitan/boom1_ct_kick,792,0,1,1,1,0,boom1_ct_kick," + pos.X + "," + pos.Y + "," + pos.Z + ",270,0,0,1,1,1,None,Characters,Default,DefaultNoTint|255/255/255/255,");
                Utils.CreateDamageRegionAt(pos, "Rock", 62.99, 156.49);
                self._disable = true;
                KillRegion = self.MapObject.GetComponent("KillRegion");
                KillRegion.KillHumans = false;
                KillRegion.KillTitans = false;
                KillRegion.KillShifters = false;
            }
        }
    }
}

component BoomRegion
{
    isDamage = false;
    radius = 0.0;
    _count = 0;
    _active_me = true;

    function OnTick()
    {
        if (self._count > 1)
        {
            self._active_me = false;
        }
        else
        {
            self._count += 1;
        }
    }

    function OnCollisionStay(other)
    {
        if (self._active_me)
        {
            if (other.Type == "Human")
            {
                if (!self.isDamage)
                {
                    vector = other.Position - self.MapObject.Position;
                    num2 = self.MapObject.Scale.X * self.radius;
                    num3 = Math.Max(5.0, num2 - vector.Magnitude);
                    other.AddForce(vector.Normalized * num3 + Vector3.Up * 1.0);
                }
                elif (!other.IsInvincible)
                {
                    other.GetKilled(self.MapObject.Name);
                }
            }
        }
    }
}

component CollisionRegion
{
    Name = "Region";
    _handler = null;

    function SetHandler(handler)
    {
        self._handler = handler;
    }
    
    function OnCollisionEnter(other)
    {
        if (self._handler != null)
        {
            self._handler.OnCollision(self.Name, "enter", other);
        }
    }

    function OnCollisionStay(other)
    {
        if (self._handler != null)
        {
            self._handler.OnCollision(self.Name, "stay", other);
        }
    }

    function OnCollisionExit(other)
    {
        if (self._handler != null)
        {
            self._handler.OnCollision(self.Name, "exit", other);
        }
    }

    function OnGetHit(character, name, damage, type)
    {
        if (self._handler != null)
        {
            self._handler.OnHit(self.Name, character, name, damage, type);
        }
    }
}

component EndRegion
{
    Team = "None";
    Humans = true;
    Titans = true;
    Shifters = true;
    EndMessage = "";
    RestartTime = 10.0;

    function OnCollisionEnter(other)
    {
        if (Game.IsEnding)
        {
            return;
        }
        if (other.IsCharacter && other.IsMine)
        {
            if (other.Type == "Human" && !self.Humans)
            {
                return;
            }
            if (other.Type == "Titan" && !self.Titans)
            {
                return;
            }
            if (other.Type == "Shifter" && !self.Shifters)
            {
                return;
            }
            if (other.Team != self.Team && self.Team != "None")
            {
                return;
            }
            UI.SetLabel("MiddleCenter", self.EndMessage);
            Game.End(self.RestartTime);
        }
    }
}

extension Utils
{
    coroutine CreateDamageRegionAt(position, name, killRadius, pushRadius)
    {
        obj1 = Map.CreateMapObjectRaw("Scene,None,645,0,1,1,1,0," + name + "," + position.X + "," + position.Y + "," + position.Z + ",0,0,0,1,1,1,Region,Characters,Default,DefaultNoTint|255/255/255/255,BoomRegion|isDamage:true|radius:" + killRadius);
        obj2 = Map.CreateMapObjectRaw("Scene,None,686,0,1,1,1,0," + name + "," + position.X + "," + position.Y + "," + position.Z + ",0,0,0,1,1,1,Region,Characters,Default,DefaultNoTint|255/255/255/255,BoomRegion|isDamage:false|radius:" + pushRadius);
        
        obj1.AddSphereCollider("Region", "Characters", Vector3.Zero, killRadius);
        obj2.AddSphereCollider("Region", "Characters", Vector3.Zero, pushRadius);

        wait 1.0;
        Map.DestroyMapObject(obj1, true);
        Map.DestroyMapObject(obj2, true);
    }

    function GetClosest(point, list)
    {
        if (list.Count == 1)
        {
            return list.Get(0);
        }
        maxDistance = Math.Infinity;
        closest = null;
        for(entity in list)
        {
            distance = (entity.Position - point).Magnitude;
            if (distance < maxDistance)
            {
                closest = entity;
                maxDistance = distance;
            }
        }

        return closest;
    }

    function GetClosestIgnore(point, list, ignore)
    {
        if (list.Count == 1)
        {
            return list.Get(0);
        }
        if (ignore != null)
        {
            list.Remove(ignore);
        }
        maxDistance = Math.Infinity;
        closest = null;
        for(entity in list)
        {
            distance = (entity.Position - point).Magnitude;
            if (distance < maxDistance)
            {
                closest = entity;
                maxDistance = distance;
            }
        }

        return closest;
    }
}

extension MathX
{
    function Atan2(y, x)
    {
        if (x > 0)
        {
            return Math.Deg2Rad(Math.Atan(y / x));
        }
        elif (x < 0 && y >= 0)
        {
            return Math.Deg2Rad(Math.Atan(y / x)) + Math.PI;
        }
        elif (x < 0 && y < 0)
        {
            return Math.Deg2Rad(Math.Atan(y / x)) - Math.PI;
        }
        elif (x == 0 && y > 0)
        {
            return Math.PI / 2;
        }
        elif (x == 0 && y < 0)
        {
            return 0-Math.PI / 2;
        }
        return 0;
    }

    function DeltaAngle(current, target)
    {
        delta = self.Repeat(target - current, 360.0);
        if (delta > 180.0)   
        {
            delta -= 360.0;
        }
        return delta;
    }

    function Repeat(t, length)
    {
        return Math.Clamp(t - Math.Floor(t / length) * length, 0.0, length);
    }
}
