component ColossalTitan
{
    Name = "Colossal Titan";
    healthTime = 0.0;
    lagMax = 0.0;
    maxHealth = 0;
    myDistance = 0.0;
    NapeArmor = 10000;
    NapeArmorTotal = 10000;
    
    _transform = null;
    _animation = null;
    _scale = 8.0;
    _difficulty = 2;
    _waitTime = 2;
    _state = "idle";
    _myHero = null;
    _actionName = "";
    _attackAnimation = "";
    _attackCheckTime = 0.0;
    _attackCheckTimeA = 0.0;
    _attackCheckTimeB = 0.0;
    _attackChkOnce = false;
    _attackCount = 0;
    _attackPattern = 0-1;
    _animationLength = 0.0;
    _animationStart = 0.0;
    _checkHitCapsuleEnd = null;
    _checkHitCapsuleEndOld = Vector3(0,0,0);
    _checkHitCapsuleR = 0.0;
    _checkHitCapsuleStart = null;
    _neckSteamObject = null;
    _sweepSmokeObject = null;
    _neck = null;
    _door_broken = null;
    _door_closed = null;
    _civillians = null;
    _hasDie = false;
    _hasspawn = false;
    _healthLabel = null;
    _isSteamNeed = false;

    function Init()
    {
        self._transform = self.MapObject.Transform;
        self._animation = self.MapObject.GetComponent("Animator");
        self._difficulty = Game.GetGeneralSetting("Difficulty");
        self._neck = self._transform.GetTransform("Amarture/Core/Controller_Body/hip/spine/chest/neck");
        self._neckSteamObject = self._transform.GetTransform("...");
        self._sweepSmokeObject = self._transform.GetTransform("...");
        if (self._myHero == null)
        {
            self.findNearestHero();
        }
        self.NapeArmor = 1000;
        flag = Game.GetMiscSetting("EndlessRespawnEnabled");
        if (self._difficulty == 1)
        {
            if (flag == false)
            {
                self.NapeArmor = 5000;
            }
            else
            {
                self.NapeArmor = 2000;
            }
        }
        elif (self._difficulty == 2)
        {
            if (flag == false)
            {
                self.NapeArmor = 8000;
            }
            else
            {
                self.NapeArmor = 3500;
            }
        }
        elif (self._difficulty == 3)
        {
            if (flag == false)
            {
                self.NapeArmor = 12000;
            }
            else
            {
                self.NapeArmor = 5000;
            }
        }
        self._state = "wait";
        self.NapeArmorTotal = self.NapeArmor;
        self._transform.Position = Vector3.Down * 10000.0;
        self._door_broken = GameObject.Find("_door_broke");
        self._door_closed = GameObject.Find("_door_fine");
        self._door_broken.Active = false;
        self._door_closed.Active = true;
        self._scale = 20.0;
        /*
        if (Minimap.instance != null)
        {
            Minimap.instance.TrackGameObjectOnMinimap(self.gameObject, Color.black, false, true, Minimap.IconStyle.CIRCLE);
        }
        */
        if (Network.IsMasterClient == true)
        {
            if (Game.GetTitanSetting("TitanSpawnEnabled") == true)
            {
                min = Game.GetTitanSetting("TitanSizeMin");
                max = Game.GetTitanSetting("TitanSizeMax");
                self._scale = Random.RandomFloat(min, max);
            }
            self.lagMax = 150.0 + self._scale * 3.0;
            self.healthTime = 0.0;
            self.maxHealth = self.NapeArmor;
            if (Game.GetTitanSetting("TitanHealthMode") > 0)
            {
                min = Game.GetTitanSetting("TitanHealthMin");
                max = Game.GetTitanSetting("TitanHealthMax");
                health = Random.RandomFloat(min, max);
                self.maxHealth = health;
                self.NapeArmor = health;
            }
            if (self.NapeArmor > 0)
            {
                #self.NetworkView.SendMessage("labelRPC", PhotonTargets.AllBuffered, new object[] { self.NapeArmor, self.maxHealth });
            }
        }
        self._hasspawn = true;
    }

    function OnTick()
    {
        self.healthTime -= Time.TickTime;
        self.updateLabel();
        if (self._state != "null")
        {
            if (self._state == "wait")
            {
                self._waitTime -= Time.TickTime;
                if (self._waitTime <= 0.0)
                {
                    self._transform.Position = new Vector3(30.0, 0.0, 784.0);
                    Game.SpawnEffect("ShifterThunder", self._transform.Position + Vector3.Up * 350.0, Vector3(270.0, 0.0, 0.0), self._scale);
                    #Camera.main.GetComponent<IN_GAME_MAIN_CAMERA>().flashBlind();
                    if (Network.IsMasterClient == true)
                    {
                        self.idle();
                    }
                    else
                    {
                        self._state = "null";
                    }
                }
            }
            elif (self._state != "idle")
            {
                if (self._state == "attack_sweep")
                {
                    if (self._attackCheckTimeA != 0.0 && ((self.GetAnimationNormalizedTime() >= self._attackCheckTimeA && self.GetAnimationNormalizedTime() <= self._attackCheckTimeB) || (!self._attackChkOnce && self.GetAnimationNormalizedTime() >= self._attackCheckTimeA)))
                    {
                        self._attackChkOnce = true;
                        /*
                        for (RaycastHit hit in self._checkHitCapsule(self._checkHitCapsuleStart.Position, self._checkHitCapsuleEnd.Position, self._checkHitCapsuleR))
                        {
                            GameObject gameObject = hit.collider.gameObject;
                            if (gameObject.tag == "Player")
                            {
                                self.killPlayer(gameObject);
                            }
                            if ((((gameObject.tag == "erenHitbox") && (self._attackAnimation == "combo_3"))) && (!false ? Network.IsMasterClient : Network.isServer))
                            {
                                gameObject.transform.root.gameObject.GetComponent<TITAN_EREN>().hitByFTByServer(3);
                            }
                        }
                        for (RaycastHit hit2 in self._checkHitCapsule(self._checkHitCapsuleEndOld, self._checkHitCapsuleEnd.Position, self._checkHitCapsuleR))
                        {
                            GameObject hitHero = hit2.collider.gameObject;
                            if (hitHero.tag == "Player")
                            {
                                self.killPlayer(hitHero);
                            }
                        }
                        */
                        self._checkHitCapsuleEndOld = self._checkHitCapsuleEnd.Position;
                    }
                    if (self.GetAnimationNormalizedTime() >= 1.0)
                    {
                        self._sweepSmokeObject.ToggleParticle(false);
                        self.NetworkView.SendMessageOthers("stopSweepSmokeRPC", PhotonTargets.Others);
                        self.findNearestHero();
                        self.idle();
                        self.playAnimation("idle");
                    }
                }
                elif (self._state == "kick")
                {
                    if (!self._attackChkOnce && (self.GetAnimationNormalizedTime() >= self._attackCheckTime))
                    {
                        self._attackChkOnce = true;
                        self._door_broken.Active = true;
                        self._door_closed.Active = false;
                        /*
                        self.NetworkView.SendMessageOthers("changeDoorRPC", PhotonTargets.OthersBuffered);
                        PhotonNetwork.Instantiate("FX/boom1_CT_KICK", (Vector3) ((self._transform.Position + (self._transform.Forward * 120f)) + (self._transform.right * 30.0)), Quaternion.Euler(270.0, 0.0, 0.0), 0);
                        PhotonNetwork.Instantiate("rock", (Vector3) ((self._transform.Position + (self._transform.Forward * 120f)) + (self._transform.right * 30.0)), Quaternion.Euler(0f, 0.0, 0.0), 0);
                        */
                    }
                    if (self.GetAnimationNormalizedTime() >= 1.0)
                    {
                        self.findNearestHero();
                        self.idle();
                        self.playAnimation("idle");
                    }
                }
                elif (self._state == "slap")
                {
                    if (!self._attackChkOnce && (self.GetAnimationNormalizedTime() >= self._attackCheckTime))
                    {
                        GameObject obj4;
                        self._attackChkOnce = true;
                        /*
                        obj4 = PhotonNetwork.Instantiate("FX/boom1", self._checkHitCapsuleStart.Position, Quaternion.Euler(270.0, 0.0, 0.0), 0);
                        if (obj4.GetComponent<EnemyfxIDcontainer>() != null)
                        {
                            obj4.GetComponent<EnemyfxIDcontainer>().titanName = self.Name;
                        }
                        obj4.transform.Scale = new Vector3(5f, 5f, 5f);
                        */
                    }
                    if (self.GetAnimationNormalizedTime() >= 1.0)
                    {
                        self.findNearestHero();
                        self.idle();
                        self.playAnimation("idle");
                    }
                }
                elif (self._state == "steam")
                {
                    if (!self._attackChkOnce && (self.GetAnimationNormalizedTime() >= self._attackCheckTime))
                    {
                        self._attackChkOnce = true;
                        /*
                        PhotonNetwork.Instantiate("FX/colossal_steam", self._transform.Position + ((Vector3) (self._transform.up * 185.0)), Quaternion.Euler(270.0, 0.0, 0.0), 0);
                        PhotonNetwork.Instantiate("FX/colossal_steam", self._transform.Position + ((Vector3) (self._transform.up * 303f)), Quaternion.Euler(270.0, 0.0, 0.0), 0);
                        PhotonNetwork.Instantiate("FX/colossal_steam", self._transform.Position + ((Vector3) (self._transform.up * 50.0)), Quaternion.Euler(270.0, 0.0, 0.0), 0);
                        */
                    }
                    if (self.GetAnimationNormalizedTime() >= 1.0)
                    {
                        /*
                        obj1 = PhotonNetwork.Instantiate("FX/colossal_steam_dmg", self._transform.Position + ((Vector3) (self._transform.up * 185.0)), Quaternion.Euler(270.0, 0.0, 0.0), 0);
                        obj2 = PhotonNetwork.Instantiate("FX/colossal_steam_dmg", self._transform.Position + ((Vector3) (self._transform.up * 303f)), Quaternion.Euler(270.0, 0.0, 0.0), 0);
                        obj3 = PhotonNetwork.Instantiate("FX/colossal_steam_dmg", self._transform.Position + ((Vector3) (self._transform.up * 50.0)), Quaternion.Euler(270.0, 0.0, 0.0), 0);
                        if (obj1.GetComponent<EnemyfxIDcontainer>() != null) obj1.GetComponent<EnemyfxIDcontainer>().titanName = self.Name;
                        if (obj2.GetComponent<EnemyfxIDcontainer>() != null) obj2.GetComponent<EnemyfxIDcontainer>().titanName = self.Name;
                        if (obj3.GetComponent<EnemyfxIDcontainer>() != null) obj3.GetComponent<EnemyfxIDcontainer>().titanName = self.Name;
                        */
                        if (self._hasDie)
                        {
                            Game.End(10.0);
                            UI.SetLabel("MiddleCenter", "Humanity win!");
                            if (Network.IsMasterClient)
                            {
                                self._transform.Position = Vector3.Down * 1000.0;
                                Map.DestroyMapObject(self.MapObject, true);
                            }
                        }
                        self.findNearestHero();
                        self.idle();
                        self.playAnimation("idle");
                    }
                }
            }
            elif (self._attackPattern == 0-1)
            {
                self.slap("r1");
                self._attackPattern += 1;
            }
            elif (self._attackPattern == 0)
            {
                self.attack_sweep("");
                self._attackPattern += 1;
            }
            elif (self._attackPattern == 1)
            {
                self.steam();
                self._attackPattern += 1;
            }
            elif (self._attackPattern == 2)
            {
                self.kick();
                self._attackPattern += 1;
            }
            elif (self._isSteamNeed == true || self._hasDie == true)
            {
                self.steam();
                self._isSteamNeed = false;
            }
            elif (self._myHero == null)
            {
                self.findNearestHero();
            }
            else
            {
                vector = self._myHero.transform.Position - self._transform.Position;
                current = 0 - MathX.Atan2(vector.z, vector.x) * Math.Rad2DegConstant;
                f = 0 - MathX.DeltaAngle(current, self._transform.Rotation.y - 90.0);
                self.myDistance = vector.Magnitude;
                num4 = self._myHero.transform.Position.y - self._transform.Position.y;
                if (self.myDistance < 85.0 && Random.RandomInt(0, 100) < 5)
                {
                    self.steam();
                }
                else
                {
                    if (num4 > 310.0 && num4 < 350.0)
                    {
                        if (Vector3.Distance(self._myHero.transform.Position, self._transform.GetTransform("APL1").Position) < 40.0)
                        {
                            self.slap("l1");
                            return;
                        }
                        if (Vector3.Distance(self._myHero.transform.Position, self._transform.GetTransform("APL2").Position) < 40.0)
                        {
                            self.slap("l2");
                            return;
                        }
                        if (Vector3.Distance(self._myHero.transform.Position, self._transform.GetTransform("APR1").Position) < 40.0)
                        {
                            self.slap("r1");
                            return;
                        }
                        if (Vector3.Distance(self._myHero.transform.Position, self._transform.GetTransform("APR2").Position) < 40.0)
                        {
                            self.slap("r2");
                            return;
                        }
                        if (self.myDistance < 150.0 && Math.Abs(f) < 80.0)
                        {
                            self.attack_sweep("");
                            return;
                        }
                    }
                    if (num4 < 300.0 && Math.Abs(f) < 80.0 && self.myDistance < 85.0)
                    {
                        self.attack_sweep("_vertical");
                    }
                    else
                    {
                        attack = Random.RandomInt(0, 7);
                        if (attack == 0)
                        {
                            self.slap("l1");
                        }
                        elif (attack == 1)
                        {
                            self.slap("l2");
                        }
                        elif (attack == 2)
                        {
                            self.slap("r1");
                        }
                        elif (attack == 3)
                        {
                            self.slap("r2");
                        }
                        elif (attack == 4)
                        {
                            self.attack_sweep("");
                        }
                        elif (attack == 5)
                        {
                            self.attack_sweep("_vertical");
                        }
                        elif (attack == 6)
                        {
                            self.steam();
                        }
                    }
                }
            }
        }
    }

    function OnNetworkMessage(sender, message) 
    {
        #Game.Print("<color=white>(" + self.NetworkPlayer.ID + ") PLAYER RPC:</color> <color=green>" + message + "</color>");

        split = String.Split(message, "|");

        if (split.Count < 1)
        {
            return;
        }

        if (call == "changeDoorRPC")
        {
            self.changeDoor();
        }
        elif (call == "labelRPC")
        {
            health = Convert.ToInt(args.Get(0));
            maxHealth = Convert.ToInt(args.Get(0));
            self.labelRPC(health, maxHealth);
        }
        elif (call == "netCrossFadeRPC")
        {
            aniName = args.Get(0);
            time = Convert.ToFloat(args.Get(0));
            self.netCrossFade(aniName, time);
        }
        elif (call == "netDieRPC")
        {
            self.netDie();
        }
        elif (call == "netPlayAnimationRPC")
        {
            aniName = args.Get(0);
            self.netPlayAnimation(aniName);
        }
        elif (call == "playsoundRPC")
        {
            sndname = args.Get(0);
            self.playsoundRPC();
        }
        elif (call == "setSizeRPC")
        {
            size = Convert.ToInt(args.Get(0));
            self.setSize(size);
        }
        elif (call == "startNeckSteamRPC")
        {
            self.startNeckSteam();
        }
        elif (call == "startSweepSmokeRPC")
        {
            self.startSweepSmoke();
        }
        elif (call == "stopSweepSmokeRPC")
        {
            self.stopSweepSmoke();
        }
        elif (call == "titanGetHitRPC")
        {
            viewID = Convert.ToInt(args.Get(0));
            speed = Convert.ToInt(args.Get(1));
            self.titanGetHit(viewID, speed);
        }
    }

    function attack_sweep(type)
    {
        self.callTitanHAHA();
        self._state = "attack_sweep";
        self._attackAnimation = "sweep" + type;
        self._attackCheckTimeA = 0.4;
        self._attackCheckTimeB = 0.57;
        self._checkHitCapsuleStart = self._transform.GetTransform("Amarture/Core/Controller_Body/hip/spine/chest/shoulder_R/upper_arm_R/forearm_R");
        self._checkHitCapsuleEnd = self._transform.GetTransform("Amarture/Core/Controller_Body/hip/spine/chest/shoulder_R/upper_arm_R/forearm_R/hand_R/hand_R_001");
        self._checkHitCapsuleR = 20.0;
        self.crossFade("attack_" + self._attackAnimation, 0.1);
        self._attackChkOnce = false;
        self._sweepSmokeObject.ToggleParticle(true);
        if (Network.IsMasterClient == true)
        {
            self.NetworkView.SendMessageOthers("startSweepSmokeRPC");
        }
    }

    function blowPlayer(human)
    {
        vector = Vector3.Zero - (self._neck.Position + self._transform.Forward * 50.0 - human.Position);
        if (Network.IsMasterClient)
        {
            force = vector.normalized * 20.0 + Vector3.Up;
            human.Velocity = force;
        }
    }

    function callTitan(special)
    {
        if (self._difficulty == 0)
        {
            return;
        }

        if (special == true || Game.Titans.Count <= 6)
        {
            /*
            GameObject obj4;
            GameObject[] objArray = GameObject.FindGameObjectsWithTag("titanRespawn");
            ArrayList list = new ArrayList();
            for (GameObject obj2 in objArray)
            {
                if (obj2.transform.parent.name == "titanRespawnCT")
                {
                    list.Add(obj2);
                }
            }
            GameObject obj3 = (GameObject) list[Random.RandomInt(0, list.Count)];
            */
            obj3 = ListX.Random(Map.FindMapObjectsByTag("titanRespawn"));
            type == "Normal";
            if (special == true)
            {
                type == "TYPE_I";
            }
            else
            {
                num2 = 0.7;
                num3 = 0.7;
                if (self._difficulty == 2)
                {
                    num2 = 0.4;
                    num3 = 0.7;
                }
                elif (self._difficulty == 3)
                {
                    num2 = -1.0;
                    num3 = 0.7;
                }
                if (Game.Titans.Count == 5)
                {
                    type == "TYPE_JUMPER";
                }
                elif (Random.RandomFloat(0.0, 1.0) >= num2)
                {
                    if (Random.RandomFloat(0.0, 1.0) < num3)
                    {
                        type == "TYPE_JUMPER";
                    }
                    else
                    {
                        type == "TYPE_CRAWLER";
                    }
                }
            }
            
            titan = Game.SpawnTitanAt(type, obj3.Position, obj3.Rotation.Y);
            
            if (special == true)
            {
                /*
                GameObject[] objArray3 = GameObject.FindGameObjectsWithTag("route");
                GameObject route = objArray3[Random.RandomInt(0, objArray3.Count)];
                while (route.name != "routeCT")
                {
                    route = objArray3[Random.RandomInt(0, objArray3.Count)];
                }
                titan.setRoute(route);
                titan.activeRad = 0;
                titan.toCheckPoint((Vector3) titan.GetComponent<TITAN>().checkPoints[0], 10.0);
                */
                titan.MoveTo(self._civillians, 200, true);
            }
            Game.SpawnEffect("TitanSpawn", titan.transform.Position, Vector3(0-90.0, 0.0, 0.0), titan.transform.Scale);
        }
    }

    function callTitanHAHA()
    {
        self._attackCount += 1;
        num = 4;
        num2 = 7;
        if (self._difficulty > 1)
        {
            if (self._difficulty == 2)
            {
                num = 4;
                num2 = 6;
            }
            elif (self._difficulty == 3)
            {
                num = 3;
                num2 = 5;
            }
        }
        if (Math.Mod(self._attackCount, num) == 0)
        {
            self.callTitan(false);
        }
        if (self.NapeArmor < (self.NapeArmorTotal * 0.3))
        {
            if (Math.Mod(self._attackCount, Convert.ToInt(num2 * 0.5)) == 0)
            {
                self.callTitan(true);
            }
        }
        elif (Math.Mod(self._attackCount, num2) == 0)
        {
            self.callTitan(true);
        }
    }

    function changeDoor()
    {
        self._door_broken.Active = true;
        self._door_closed.Active = false;
    }

    /*
    private RaycastHit[] _checkHitCapsule(Vector3 start, Vector3 end, float r)
    {
        return Physics.SphereCastAll(start, r, end - start, Vector3.Distance(start, end));
    }
    */

    function crossFade(aniName, time)
    {
        self._animation.ChangeAnimation(aniName, time);
        self._animationStart = Time.GameTime;
        self._animationLength = self._transform.GetAnimationLength(aniName);
        if (Network.IsMasterClient == true)
        {
            self.NetworkView.SendMessageOthers("netCrossFadeRPC|" + aniName + "/" + time);
        }
    }
    
    function GetAnimationNormalizedTime()
    {
        return (Time.GameTime - self._animationStart) / self._animationLength;
    }

    function findNearestHero()
    {
        self._myHero = Utils.GetClosest(self._transform.Position, Game.Humans);
    }

    function idle()
    {
        self._state = "idle";
        self.crossFade("idle", 0.2);
    }

    function kick()
    {
        self._state = "kick";
        self._actionName = "attack_kick_wall";
        self._attackCheckTime = 0.64;
        self._attackChkOnce = false;
        self.crossFade(self._actionName, 0.1);
    }
    
    function killPlayer(human)
    {
        if (human != null)
        {
            human.GetKilled(self.Name);
        }
    }

    function labelRPC(health, maxHealth)
    {
        /*
        if (health < 0)
        {
            if (self._healthLabel != null)
            {
                #UnityEngine.Object.Destroy(self._healthLabel);
            }
        }
        else
        {
            if (self._healthLabel == null)
            {
                self._healthLabel = (GameObject) UnityEngine.Object.Instantiate(Resources.Load("UI/LabelNameOverHead"));
                self._healthLabel.name = "LabelNameOverHead";
                self._healthLabel.transform.parent = self._transform;
                self._healthLabel.transform.localPosition = new Vector3(0f, 430f, 0.0);
                float a = 15f;
                if ((self._scale > 0.0) && (self._scale < 1.0))
                {
                    a = 15f / self._scale;
                    a = Math.Min(a, 100f);
                }
                self._healthLabel.transform.Scale = new Vector3(a, a, a);
            }
            string str = "[7FFF00]";
            float num2 = Convert.ToFloat(health)) / Convert.ToFloat(maxHealth);
            if ((num2 < 0.75f) && (num2 >= 0.5))
            {
                str = "[f2b50f]";
            }
            elif ((num2 < 0.5) && (num2 >= 0.25f))
            {
                str = "[ff8100]";
            }
            elif (num2 < 0.25f)
            {
                str = "[ff3333]";
            }
            self._healthLabel.GetComponent<UILabel>().text = str + Convert.ToString(health);
        }
        */
    }

    function neckSteam()
    {
        self._neckSteamObject.ToggleParticle(true);
        if (Network.IsMasterClient == true)
        {
            self.NetworkView.SendMessageOthers("startNeckSteamRPC");
        }
        self._isSteamNeed = true;
        radius = 30.0;
        /*
        for (Collider collider in Physics.OverlapSphere(self._neck.transform.Position - ((self._transform.Forward * 10.0)), radius))
        {
            if (collider.transform.root.tag == "Player")
            {
                GameObject gameObject = collider.transform.root.gameObject;
                if ((gameObject.GetComponent<TITAN_EREN>() == null) && (gameObject.GetComponent<HERO>() != null))
                {
                    self.blowPlayer(gameObject);
                }
            }
        }
        */
    }

    function netCrossFade(aniName, time)
    {
        self._animation.ChangeAnimation(aniName, time);
    }

    function netDie()
    {
        self._hasDie = true;
    }

    function netPlayAnimation(aniName)
    {
        self._animation.Play(aniName);
    }

    function playAnimation(aniName)
    {
        self._animation.Play(aniName);
        if (Network.IsMasterClient == true)
        {
            self.NetworkView.SendMessageOthers("netPlayAnimationRPC|" + aniName);
        }
    }

    function playSound(sndname)
    {
        self.playsoundRPC(sndname);
        if (Network.IsMasterClient)
        {
            self.NetworkView.SendMessageOthers("playsoundRPC|" + sndname);
        }
    }

    function playsoundRPC(sndname)
    {
        self._transform.GetTransform(sndname).PlaySound();
    }

    function setSize(size)
    {
        self._scale = Math.Clamp(size, 0.1, 50.0);
        self._transform.Scale = self._transform.Scale * size * 0.05;
    }

    function slap(type)
    {
        self.callTitanHAHA();
        self._state = "slap";
        self._attackAnimation = type;
        if (type == "r1" || type == "r2")
        {
            self._checkHitCapsuleStart = self._transform.GetTransform("Amarture/Core/Controller_Body/hip/spine/chest/shoulder_R/upper_arm_R/forearm_R/hand_R/hand_R_001");
        }
        if (type == "l1" || type == "l2")
        {
            self._checkHitCapsuleStart = self._transform.GetTransform("Amarture/Core/Controller_Body/hip/spine/chest/shoulder_L/upper_arm_L/forearm_L/hand_L/hand_L_001");
        }
        self._attackCheckTime = 0.57;
        self._attackChkOnce = false;
        self.crossFade("attack_slap_" + self._attackAnimation, 0.1);
    }

    function startNeckSteam()
    {
        self._neckSteamObject.ToggleParticle(false);
        self._neckSteamObject.ToggleParticle(true);
    }

    function startSweepSmoke()
    {
        self._sweepSmokeObject.ToggleParticle(true);
    }

    function steam()
    {
        self.callTitanHAHA();
        self._state = "steam";
        self._actionName = "attack_steam";
        self._attackCheckTime = 0.45;
        self.crossFade(self._actionName, 0.1);
        self._attackChkOnce = false;
    }

    function stopSweepSmoke()
    {
        self._sweepSmokeObject.ToggleParticle(false);
    }

    function titanGetHit(viewID, speed)
    {
        human = Game.FindCharacterByViewID(viewID);
        if (human != null)
        {
            vector = human.Position - self._neck.Position;
            if (vector.Magnitude < self.lagMax && self.healthTime <= 0.0)
            {
                if (Game.GetTitanSetting("TitanArmorEnabled") == false || speed >= Game.GetTitanSetting("TitanArmor") == true)
                {
                    self.NapeArmor -= speed;
                }
                if (self.maxHealth > 0.0)
                {
                    #self.NetworkView.SendMessage("labelRPC", PhotonTargets.AllBuffered, new object[] { self.NapeArmor, self.maxHealth });
                }
                self.neckSteam();
                if (self.NapeArmor <= 0)
                {
                    self.NapeArmor = 0;
                    if (self._hasDie == false)
                    {
                        self.NetworkView.SendMessageAll("netDieRPC");
                        #GameObject.Find("MultiplayerManager").GetComponent<FengGameManagerMKII>().titanGetKill(human.Player, speed, self.Name);
                    }
                }
                else
                {
                    /*
                    GameObject.Find("MultiplayerManager").GetComponent<FengGameManagerMKII>().sendKillInfo(false, (string) human.Player.customProperties[PhotonPlayerProperty.name], true, "Colossal Titan's neck", speed);
                    object[] parameters = new object[] { speed };
                    GameObject.Find("MultiplayerManager").GetComponent<FengGameManagerMKII>().photonView.RPC("netShowDamage", human.Player, speed);
                    */
                }
                self.healthTime = 0.2;
            }
        }
    }

    function updateLabel()
    {
        /*
        if ((self._healthLabel != null) && self._healthLabel.GetComponent<UILabel>().isVisible)
        {
            self._healthLabel.transform.LookAt(((Vector3) (2f * self._healthLabel.transform.Position)) - Camera.main.transform.Position);
        }
        */
    }

}

extension Utils
{
    function GetClosest(point, list)
    {
        if (list.Count == 1)
        {
            return list.Get(0);
        }
        maxDistance = Math.Infinity;
        closest = null;
        for(entity in list)
        {
            distance = (entity.Position - point).Magnitude;
            if (distance < maxDistance)
            {
                closest = entity;
                maxDistance = distance;
            }
        }

        return closest;
    }

    function GetClosestIgnore(point, list, ignore)
    {
        if (list.Count == 1)
        {
            return list.Get(0);
        }
        if (ignore != null)
        {
            list.Remove(ignore);
        }
        maxDistance = Math.Infinity;
        closest = null;
        for(entity in list)
        {
            distance = (entity.Position - point).Magnitude;
            if (distance < maxDistance)
            {
                closest = entity;
                maxDistance = distance;
            }
        }

        return closest;
    }
}

extension MathX
{
    function Atan2(y, x)
    {
        if (x > 0)
        {
            return Math.Deg2Rad(Math.Atan(y / x));
        }
        elif (x < 0 && y >= 0)
        {
            return Math.Deg2Rad(Math.Atan(y / x)) + Math.PI;
        }
        elif (x < 0 && y < 0)
        {
            return Math.Deg2Rad(Math.Atan(y / x)) - Math.PI;
        }
        elif (x == 0 && y > 0)
        {
            return Math.PI / 2;
        }
        elif (x == 0 && y < 0)
        {
            return 0-Math.PI / 2;
        }
        return 0;
    }

    function DeltaAngle(current, target)
    {
        return 0.0;
    }
}

extension ListX
{
    function IndexOf(list, obj)
    {
        for (i in Range(0, list.Count, 1))
        {
            if (list.Get(i) == obj)
            {
                return i;
            }
        }
        return -1;
    }

    function Contains(list, obj)
    {
        for (element in list)
        {
            if (element == obj)
            {
                return true;
            }
        }
        return false;
    }

    function Random(list)
    {
        if (list.Count == 0)
        {
            return null;
        }
        return list.Get(Random.RandomInt(0, list.Count));
    }
}